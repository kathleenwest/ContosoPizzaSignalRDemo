<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ContosoPizza</name>
    </assembly>
    <members>
        <member name="F:ContosoPizza.Controllers.OrderController._orderService">
            <summary>
            Reference to the Order Service
            </summary>
        </member>
        <member name="M:ContosoPizza.Controllers.OrderController.#ctor(ContosoPizza.Services.IOrderService)">
            <summary>
            Constructor
            </summary>
            <param name="orderService">IOrderService order service reference</param>
        </member>
        <member name="M:ContosoPizza.Controllers.OrderController.GetAll">
            <summary>
            Get All Pizzas
            </summary>
            <returns>List of (PizzaOrder) objects</returns>
        </member>
        <member name="M:ContosoPizza.Controllers.OrderController.Get(System.Guid)">
            <summary>
            Get Pizza Order (Single)
            </summary>
            <param name="id">Guid of the pizza order</param>
            <returns>single (PizzaOrder)</returns>
        </member>
        <member name="M:ContosoPizza.Controllers.OrderController.CreateOrderAsync(ContosoPizza.Models.PizzaOrder)">
            <summary>
            Create Pizza Order
            </summary>
            <param name="pizzaOrder">a valid (PizzaOrder)</param>
            <returns>Created Pizza Order Guid</returns>
        </member>
        <member name="M:ContosoPizza.Controllers.OrderController.Patch(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ContosoPizza.Models.PizzaOrder})">
            <summary>
            Patch Update a Pizza Order
            </summary>
            <param name="id">Guid id of the pizza order</param>
            <param name="pizzaOrderUpdates">JsonPatchDocument with Pizza Order updates</param>
            
            JSON Example: 
            [
              {
                "value": "Preparation",
                "path": "/status",
                "op": "replace"
              }
            ] 
            <returns></returns>
        </member>
        <member name="T:ContosoPizza.Models.OrderStatus">
            <summary>
            Lifecycle of Pizza Order
            </summary>
        </member>
        <member name="T:ContosoPizza.Models.Pizza">
            <summary>
            Simple Pizza Model
            </summary>
        </member>
        <member name="P:ContosoPizza.Models.Pizza.Id">
            <summary>
            Globally unique identifier for the pizza
            </summary>
        </member>
        <member name="P:ContosoPizza.Models.Pizza.PizzaDetails">
            <summary>
            Pizza Details: What the customer wants
            </summary>
        </member>
        <member name="M:ContosoPizza.Models.Pizza.#ctor">
            <summary>
            Constructor
            When a new pizza is created, it is assigned a guid
            </summary>
        </member>
        <member name="T:ContosoPizza.Models.PizzaOrder">
            <summary>
            Simple Pizza Order Class Model
            </summary>
        </member>
        <member name="F:ContosoPizza.Models.PizzaOrder.orderStatus">
            <summary>
            Private field for Status property
            </summary>
        </member>
        <member name="P:ContosoPizza.Models.PizzaOrder._orderService">
            <summary>
            Reference to the IOrderService
            </summary>
        </member>
        <member name="P:ContosoPizza.Models.PizzaOrder.OrderId">
            <summary>
            Globably unique identifier for the the order
            </summary>
        </member>
        <member name="P:ContosoPizza.Models.PizzaOrder.CustomerName">
            <summary>
            The customer name for the pizza order (submitted)
            </summary>
        </member>
        <member name="P:ContosoPizza.Models.PizzaOrder.Pizza">
            <summary>
            Pizza model reference for the order
            </summary>
        </member>
        <member name="P:ContosoPizza.Models.PizzaOrder.ConnectionId">
            <summary>
            SignalR ConnectionId for this client
            </summary>
        </member>
        <member name="P:ContosoPizza.Models.PizzaOrder.Status">
            <summary>
            Current status of the pizza order
            </summary>
        </member>
        <member name="M:ContosoPizza.Models.PizzaOrder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ContosoPizza.Services.IOrderService.OrderPizzaAsync(ContosoPizza.Models.PizzaOrder)">
            <summary>
            Order a Pizza
            </summary>
            <param name="order">(PizzaOrder) pizza order</param>
            <returns>a Task without result</returns>
        </member>
        <member name="M:ContosoPizza.Services.IOrderService.GetAllPizzaOrders">
            <summary>
            Returns all Pizza Orders
            </summary>
            <returns>List of (PizzaOrder) objects</returns>
        </member>
        <member name="M:ContosoPizza.Services.IOrderService.GetPizzaOrder(System.Guid)">
            <summary>
            Get Pizza Order
            </summary>
            <param name="id">Guid of the known pizza order</param>
            <returns>a (PizzaOrder) object (if existing)</returns>
        </member>
        <member name="M:ContosoPizza.Services.IOrderService.UpdatePizzaOrder(ContosoPizza.Models.PizzaOrder)">
            <summary>
            Updates the Existing Pizza Order
            </summary>
            <param name="pizzaOrder">existing (PizzaOrder) order</param>
        </member>
        <member name="M:ContosoPizza.Services.IOrderService.SendCustomerOrderStatusUpdateAsync(ContosoPizza.Models.PizzaOrder)">
            <summary>
            Send Pizza Order Update to Customer
            </summary>
            <param name="order">(PizzaOrder) order</param>
            <returns>a Task without results</returns>
        </member>
        <member name="P:ContosoPizza.Services.OrderService.PizzaOrders">
            <summary>
            In-memory static list of PizzaOrders
            (mock of database later)
            </summary>
        </member>
        <member name="F:ContosoPizza.Services.OrderService._hubContext">
            <summary>
            Reference to the IHubContext (SignalR)
            </summary>
        </member>
        <member name="M:ContosoPizza.Services.OrderService.#ctor(Microsoft.AspNetCore.SignalR.IHubContext{ContosoPizza.Services.OrdersHub})">
            <summary>
            Constructor
            </summary>
            <param name="hubContext">IHubContext of type OrdersHub</param>
        </member>
        <member name="M:ContosoPizza.Services.OrderService.OrderPizzaAsync(ContosoPizza.Models.PizzaOrder)">
            <summary>
            Order a Pizza
            </summary>
            <param name="order">(PizzaOrder) pizza order</param>
            <returns>a Task without result</returns>
        </member>
        <member name="M:ContosoPizza.Services.OrderService.GetAllPizzaOrders">
            <summary>
            Returns all Pizza Orders
            </summary>
            <returns>List of (PizzaOrder) objects</returns>
        </member>
        <member name="M:ContosoPizza.Services.OrderService.GetPizzaOrder(System.Guid)">
            <summary>
            Get Pizza Order
            </summary>
            <param name="id">Guid of the known pizza order</param>
            <returns>a (PizzaOrder) object (if existing)</returns>
        </member>
        <member name="M:ContosoPizza.Services.OrderService.UpdatePizzaOrder(ContosoPizza.Models.PizzaOrder)">
            <summary>
            Updates the Existing Pizza Order
            </summary>
            <param name="pizzaOrder">existing (PizzaOrder) order</param>
        </member>
        <member name="M:ContosoPizza.Services.OrderService.SendCustomerOrderStatusUpdateAsync(ContosoPizza.Models.PizzaOrder)">
            <summary>
            Send Pizza Order Update to Customer
            </summary>
            <param name="order">(PizzaOrder) order</param>
            <returns>a Task without results</returns>
        </member>
    </members>
</doc>
